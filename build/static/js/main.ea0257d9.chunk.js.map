{"version":3,"sources":["images/redditLogo.png","components/LogIn.js","helper/PostIndex.js","util/getAPI.js","helper/DisplayPosts.js","Fire.js","components/HomePage.js","provider/UserProvider.js","components/Navbar.js","components/Subreddit.js","util/InputHook.js","components/CreatePost.js","components/CreateSubreddit.js","helper/PostDetails.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LogIn","props","user","email","setEmail","password","setPassword","userName","setUserName","handleLogIn","handleSignUp","userExist","setUserExist","emailError","passwordError","userNameError","useEffect","window","location","href","className","TextField","id","color","variant","label","autoFocus","required","value","onChange","e","target","type","Button","onClick","PostIndex","allPost","history","useHistory","openPost","preventDefault","push","redirectToPost","printAll","map","post","key","fontSize","subname","user_name","title","body","image","src","alt","getAPI","hostname","DisplayPost","useState","setAllPost","API","fetchPosts","choosen","a","Number","isInteger","axios","get","res","data","payload","console","log","fire","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","analytics","HomePage","auth","currentUser","style","width","UserContext","createContext","UserProvider","children","userID","setUserID","getUserID","Id","onAuthStateChanged","userAuth","Provider","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","NavBar","fireUser","subscriptions","setSubscriptions","subreddits","setSubreddits","chosen","setChosen","setValue","inputValue","setInputValue","homeRedirect","classes","React","anchorEl","setAnchorEl","useContext","subredditRedirect","selected","pathname","handleChange","sub","handleClickClose","signOut","redirectToSubreddit","fetchSubs","handleSearchInput","length","undefined","handleSearchClick","AppBar","height","position","Toolbar","Grid","justify","container","item","logo","FormControl","formControl","NativeSelect","inputProps","name","subreddit","Autocomplete","newValue","onInputChange","newInputValue","clearOnEscape","options","getOptionLabel","option","autoHighlight","renderInput","params","aria-controls","aria-haspopup","currentTarget","displayName","Menu","keepMounted","open","Boolean","onClose","MenuItem","Subreddit","subredditDetails","setSubredditDetails","useParams","subscribed","setSubscribed","subID","setSubID","subCount","setSubCount","handleSubscribe","user_id","sub_id","handleUnsubscribe","delete","isUserSubscribed","count","fetchDetails","useInputs","initialValue","CreatePost","chosenSub","setChosenSub","urlLink","setUrlLink","titleContext","bodyContext","filePreview","setFilePreview","fileName","setFileName","fetchSubreddits","handleSubmit","context","hidden","onSubmit","file","files","URL","createObjectURL","ref","put","on","snapshot","error","child","getDownloadURL","then","url","CreateSubreddit","nameContext","reload","PostDetails","showPost","setShowPost","showPostVotes","setShowPostVotes","showAllComments","setShowAllComments","commentContext","logInRedirect","fetchPost","post_id","postVotes","comments","printComments","comment","moment","comment_date","fromNow","handlePostVote","didVote","vote_type","patch","IconButton","aria-label","createMuiTheme","palette","primary","main","secondary","App","setUser","setEmailError","setPasswordError","setUserNameError","clearError","signInWithEmailAndPassword","catch","code","message","createUserWithEmailAndPassword","updateProfile","ThemeProvider","exact","path","render","component","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea0257d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/redditLogo.afe63cf7.png\";","import React, { useEffect } from \"react\";\nimport \"../css/LogIn.css\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nconst LogIn = (props) => {\n    const { user, email, setEmail, password, setPassword, userName, setUserName, handleLogIn, handleSignUp, userExist, setUserExist, emailError, passwordError, userNameError } = props;\n\n    useEffect(() => {\n        if(user) {\n            window.location.href = \"./\"\n        }\n    }, [user])\n    return (\n        <div className=\"loginContainer\">\n            <div className=\"loginContent\">\n                { !userExist ?\n                    <h2 className=\"logInTitle\">Log In</h2>\n                    : <h2 className=\"logInTitle\">Create an Account</h2>\n                }\n                <TextField id=\"outlined-basic\" color='secondary' variant=\"outlined\" label=\"Email\" autoFocus required value={email} onChange={(e) => setEmail(e.target.value)}/>\n                <p>{emailError}</p>\n                <TextField id=\"outlined-basic\" color='secondary' variant=\"outlined\" label=\"Password\" type=\"password\" autoFocus required value={password} onChange={(e) => setPassword(e.target.value)}/>\n                <p>{passwordError}</p>\n                <>\n                    {!userExist ?\n                    <>\n                        <Button variant=\"contained\" color='secondary' onClick={handleLogIn}>Log In</Button>\n                        <p>\n                            Don't have an account?\n                            <br/>\n                            <span className=\"logInClick\" onClick={() => setUserExist(!userExist)}>Sign Up</span>\n                        </p>\n                    </>\n                    : \n                    <>\n                        <TextField id=\"outlined-basic\" color='secondary' variant=\"outlined\" label=\"Username\" autoFocus required value={userName} onChange={(e) => setUserName(e.target.value)}/>\n                        <p>{userNameError}</p>\n                        <Button variant=\"contained\" color='secondary' onClick={handleSignUp}>Sign Up</Button>\n                        <p>\n                            Have an account?\n                            <br/>\n                            <span className=\"logInClick\" onClick={() => setUserExist(!userExist)}>Login</span>\n                        </p>\n                    </>}\n                </>\n            </div>\n        </div>\n    )\n}\n\nexport default LogIn;","import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport RedditIcon from '@material-ui/icons/Reddit';\nimport \"../css/PostIndex.css\";\n\nconst PostIndex = ({ allPost }) => {\n    const history = useHistory();\n    const redirectToPost = (id) => history.push(`/post/${id}`);\n    const openPost = (e, id) => {\n        e.preventDefault();\n        redirectToPost(id)\n    }\n\n    const printAll = allPost.map((post) => (\n        <div className=\"postCard\" key={post.id} onClick={((e) => {openPost(e, post.id)})}>\n            <div className=\"postPostedHeader\">\n                <RedditIcon fontSize='large' color='secondary'/>\n                <p className=\"postSubreddit\"><b>r/{post.subname}</b></p>\n                <p className=\"postUser\"> Posted by u/{post.user_name}</p>\n            </div>\n            <div className=\"postDetails\">\n                <h2>{post.title}</h2>\n                <p>{post.body}</p>\n                {post.image ? \n                    <img className=\"postImage\" src={post.image} alt=\"post_image\"/>\n                    : null\n                }\n            </div>\n        </div>\n    ))\n\n    useEffect(() => {\n    }, [allPost])\n\n    return (\n      <div >\n      {printAll}\n      </div>\n    );\n  };\n  \n  export default PostIndex;\n  ","export const getAPI = () => {\n    if(window.location.hostname === \"localhost\") {\n        return \"http://localhost:3001\"\n    } else {\n        return \"https://cta-reddit.herokuapp.com\"\n    }\n}","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport PostIndex from \"./PostIndex\";\nimport { getAPI } from \"../util/getAPI\";\n\nconst DisplayPost = (props) => {\n    const [allPost, setAllPost] = useState([]);\n    const API = getAPI();\n    \n    const fetchPosts = async (choosen) => {\n        try {\n            if(Number.isInteger(choosen) === true) {\n                let res = await axios.get(`${API}/posts/${choosen}`);\n                setAllPost(res.data.payload);\n            } else {\n                let res = await axios.get(`${API}/posts/`);\n                setAllPost(res.data.payload);\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        fetchPosts(props.choosen);\n    }, [props])\n\n    return(\n        <div className=\"postFeed\">\n            <PostIndex allPost={allPost}/>\n        </div>\n    )\n\n}\n\nexport default DisplayPost;","import firebase from \"firebase\"\nimport \"firebase/storage\";\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyCjYwVQi6fcraNbfaLTvLKtA5QFikDZqYc\",\n    authDomain: \"cta-reddit.firebaseapp.com\",\n    projectId: \"cta-reddit\",\n    storageBucket: \"cta-reddit.appspot.com\",\n    messagingSenderId: \"421801727139\",\n    appId: \"1:421801727139:web:abf9eeeca88b53ee6a5b16\",\n    measurementId: \"G-E4TVSH9EGV\"\n  };\n  \n  const fire = firebase.initializeApp(firebaseConfig);\n  const storage = firebase.storage();\n  firebase.analytics();\n\n  export { storage, fire as default };","import React from \"react\";\nimport DisplayPost from \"../helper/DisplayPosts\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../css/HomePage.css\";\nimport fire from \"../Fire\";\nimport TextField from '@material-ui/core/TextField';\nimport RedditIcon from '@material-ui/icons/Reddit';\nimport ImageIcon from '@material-ui/icons/Image';\nimport TollIcon from '@material-ui/icons/Toll';\n\nconst HomePage = () => {\n    const user = fire.auth().currentUser;\n    const history = useHistory();\n    const redirectToPost = () => history.push(`/addpost`);\n    return(\n        <div className=\"homeContainer\">\n            <div className=\"homeFeed\">\n                { user ? \n                    <div className=\"homeCreatePost\">\n                        <RedditIcon className=\"icon\" fontSize='large' color='secondary' onClick={redirectToPost}/>\n                        <TextField id=\"outlined-basic\" color='secondary' label=\"Create Post\" variant=\"outlined\" style={{width: 750}} onClick={redirectToPost}/>\n                        <ImageIcon className=\"icon\" fontSize='large' color='secondary' onClick={redirectToPost}/>\n                        <TollIcon className=\"icon\" fontSize='large' color='secondary' onClick={redirectToPost}/>\n                    </div>\n                    : null\n                }\n                <DisplayPost choosen={[]}/>\n            </div>\n        </div>\n    )\n}\n\nexport default HomePage;","import React, { useState, useEffect, createContext } from \"react\";\nimport axios from \"axios\";\nimport fire from \"./../Fire\";\nimport { getAPI } from \"../util/getAPI\"\n\nexport const UserContext = createContext();\n\nconst UserProvider = ({ children }) => {\n    const [userID, setUserID] = useState(null);\n    const API = getAPI();\n\n   useEffect(() => {\n    const getUserID = async (email) => {\n      try {\n        let Id = await axios.get(`${API}/users/search/${email}`)\n        setUserID(Id.data.payload[0].id)\n      } catch (error) {\n        console.log(error)\n      }\n    }\n    fire.auth().onAuthStateChanged(userAuth => {\n      if(userAuth !== null) {\n        getUserID(userAuth.email)\n      }\n    });\n   }, []);\n\n    return (\n      <UserContext.Provider value={{userID}}>\n        {children}\n      </UserContext.Provider>\n    )\n}\nexport default UserProvider;","import React, { useEffect, useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../css/Navbar.css\";\nimport logo from \"../images/redditLogo.png\";\nimport axios from \"axios\";\nimport fire from \"./../Fire\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport Grid from '@material-ui/core/Grid';\nimport PageviewIcon from '@material-ui/icons/Pageview';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport { UserContext } from \"../provider/UserProvider\";\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { getAPI } from \"../util/getAPI\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }));\n\nconst NavBar = () => {\n    const fireUser = fire.auth().currentUser;\n    const [subscriptions, setSubscriptions] = useState([]);\n    const [subreddits, setSubreddits] = useState([]);\n    const [chosen, setChosen] = useState(\"\");\n    const [value, setValue] = useState(subreddits[0]);\n    const [inputValue, setInputValue] = useState(\"\");\n    const history = useHistory();\n    const homeRedirect = () => history.push(`/`);\n    const logInRedirect = () => history.push(`/login`);\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const { userID } = useContext(UserContext);\n    const API = getAPI();\n\n    const subredditRedirect = (selected) => {\n        history.push({\n            pathname: `/subreddit/${selected}`\n        });\n    }\n    \n    const handleLogoClick = () => {\n        setChosen(\"Home\");\n        homeRedirect();\n    }\n    \n    const handleChange = async (e) => {\n        e.preventDefault();\n        let sub = e.target.value\n        if(sub !== \"\") {\n            setChosen(sub)\n            if(sub === \"Home\") {\n                homeRedirect();\n            } else {\n                subredditRedirect(sub)\n            }\n        }\n    }\n    \n    const logIn = () => {\n        logInRedirect();\n    }\n    \n    const handleClickOpen = (e) => {\n        setAnchorEl(e.currentTarget);\n    };\n    \n    const handleClickClose = () => {\n        setAnchorEl(null);\n    };\n    \n    const signOut = () => {\n        handleClickClose();\n        fire.auth().signOut();\n        window.location.href = \"./\"\n    }\n    const redirectToSubreddit = () => {\n        handleClickClose();\n        history.push(`/addsubreddit`);\n    }\n    \n    useEffect(() => {\n        const fetchSubs = async () => {\n            try {\n                if(userID !== null) {\n                    let subscriptions = await axios.get(`${API}/subscriptions/user/${userID}`);\n                    setSubscriptions(subscriptions.data.payload);\n                }\n                let subreddits = await axios.get(`${API}/subreddits/`);\n                setSubreddits(subreddits.data.payload);\n            } catch (error) {\n                console.log(error)\n            }\n        }\n\n        const handleSearchClick = (value) => {\n            if(value !== undefined || value !== null){\n                subredditRedirect(value);\n            }\n        }\n        const handleSearchInput = async (value) => {\n            debugger\n            if(value.length > 0){\n                try {\n                    let sub = await axios.get(`${API}/subreddits/${value}`);\n                    if(sub.data.payload.subname){\n                        subredditRedirect(value);\n                    }\n                } catch (error) {\n                    console.log(error)\n                }\n            } else {\n                homeRedirect();\n            }\n        }\n\n        handleSearchClick(value);\n        handleSearchInput(inputValue);\n        fetchSubs();\n    }, [ userID, value ]);\n    \n    return(\n        <AppBar style={{height: 60}} position=\"static\">\n            <Toolbar>\n            <Grid\n            justify=\"space-between\"\n            container \n            spacing={24}\n            >\n                <Grid item>\n                    <img src={logo} className=\"Logo\" alt=\"\" onClick={handleLogoClick}/>\n                </Grid>\n                { fireUser ?\n                    <Grid item>\n                        <FormControl className={classes.formControl}>\n                            <NativeSelect\n                            color='secondary'\n                            value={chosen}\n                            onChange={handleChange}\n                            inputProps={{\n                                name: 'subreddit',\n                                id: 'subname',\n                            }}\n                            >\n                                <option value=\"Home\">Home</option>\n                                {subscriptions.map((subreddit) => \n                                    <option key={subreddit.id} value={ subreddit.subname }>/r{subreddit.subname}</option>\n                                )}\n                            </NativeSelect>\n                        </FormControl>\n                    </Grid>\n                    : null\n                }\n                <Grid item className=\"navBarSearch\">\n                    <PageviewIcon fontSize='large' color='secondary'/>\n                    <Autocomplete\n                        id=\"combo-box-subs\"\n                        value={value}\n                        onChange={(e, newValue) => {\n                            setValue(newValue);\n                        }}\n                        inputValue={inputValue}\n                        onInputChange={(e, newInputValue) => {\n                            setInputValue(newInputValue);\n                        }}\n                        clearOnEscape\n                        options={subreddits}\n                        getOptionLabel={(option) => option.subname}\n                        style={{ width: 300 }}\n                        autoHighlight\n                        renderInput={(params) => \n                        <TextField {...params} value={ params } label=\"Search\" variant=\"outlined\"/>}\n                    />\n                </Grid>\n                <Grid item>\n                { fireUser ?\n                    <div>\n                        <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClickOpen}>\n                            {fireUser.displayName}\n                        </Button>\n                        <Menu\n                            id=\"simple-menu\"\n                            anchorEl={anchorEl}\n                            keepMounted\n                            open={Boolean(anchorEl)}\n                            onClose={handleClickClose}\n                        >\n                            <MenuItem onClick={redirectToSubreddit}>\n                                <AddCircleOutlineIcon fontSize='medium' color='secondary' onClick={redirectToSubreddit}/>\n                                Create Subreddit\n                            </MenuItem>\n                            <MenuItem onClick={signOut}>\n                                <ExitToAppIcon fontSize='medium' color='secondary' onClick={signOut}/>\n                                Logout\n                            </MenuItem>\n                        </Menu>\n                    </div>\n                    : <Button variant=\"contained\" color='secondary' onClick={logIn}>Log In</Button>\n                }\n                </Grid>\n            </Grid>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default NavBar;","import React, { useState, useEffect, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport DisplayPost from \"../helper/DisplayPosts\";\nimport { UserContext } from \"../provider/UserProvider\";\nimport Button from '@material-ui/core/Button';\nimport \"../css/Subreddit.css\";\nimport { getAPI } from \"../util/getAPI\";\n\nconst Subreddit = () => {\n    const [subredditDetails, setSubredditDetails] = useState([]);\n    const { subname } = useParams();\n    const { userID } = useContext(UserContext);\n    const [subscribed, setSubscribed] = useState(false);\n    const [subID, setSubID] = useState();\n    const [subCount, setSubCount] = useState(\"\");\n    const API = getAPI();\n\n    const handleSubscribe = async (e) => {\n        e.preventDefault();\n        try {\n            await axios.post(`${API}/subscriptions/add`, {\n                user_id: userID,\n                sub_id: subID\n            });\n            setSubscribed(true);\n        } catch (error) {\n           console.log(error) \n        }\n    };\n\n    const handleUnsubscribe = async (e) => {\n        e.preventDefault();\n        try {\n            await axios.delete(`${API}/subscriptions/delete`, {\n                data: {\n                    user_id: userID,\n                    sub_id: subID\n                }\n            });\n            setSubscribed(false);\n        } catch (error) {\n           console.log(error) \n        }\n    };\n    \n    useEffect(() => {\n        const isUserSubscribed = async (id) => {\n            try {\n                let res = await axios.get(`${API}/subscriptions/usersubbed/${userID}/${id}`);\n                if(res.data.payload) {\n                    setSubscribed(true);\n                }\n            } catch (error) {\n                setSubscribed(false);\n                console.log(error)\n            }\n        };\n\n        const fetchDetails = async () => {\n            try {\n                if(subname !== undefined) {\n                    let sub = await axios.get(`${API}/subreddits/${subname}`);\n                    let count = await axios.get(`${API}/subscriptions/subreddit/${sub.data.payload.id}`);\n                    setSubredditDetails(sub.data.payload);\n                    isUserSubscribed(sub.data.payload.id);\n                    setSubID(sub.data.payload.id);\n                    setSubCount(count.data.payload.count);\n                } else {\n                    \n                }\n            } catch (error) {\n                console.log(error)\n            }\n        }; \n        fetchDetails();\n    }, [subname, userID, subscribed])\n\n    return (\n        <div className=\"subContainer\">\n            <div className=\"subInfo\">\n                <div className=\"subHeader\">\n                    <h1 className=\"subTitle\">{subredditDetails.subname}</h1>\n                    <p className=\"subRoute\">/r/{subredditDetails.subname}</p>\n                </div>\n                {subCount === \"1\" ?\n                <p>{subCount} member</p>\n                : <p>{subCount} members</p>\n                }\n                { subscribed ? \n                <Button variant=\"contained\" color='secondary' type=\"submit\" style={{height:50, width: 100}} onClick={handleUnsubscribe}>Leave</Button>\n                :<Button variant=\"contained\" color='secondary' type=\"submit\" style={{height:50, width: 100}} onClick={handleSubscribe}>Join</Button>\n                }\n            </div>\n            <div className=\"subFeed\">\n                <DisplayPost choosen={subredditDetails.id}/>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default Subreddit","import { useState } from \"react\";\n\nexport const useInputs = (initialValue) => {\n    const [value, setValue] = useState(initialValue);\n    const handleChange = (e) => {\n        setValue(e.target.value);\n    }\n    return { value, onChange: handleChange}\n}","import React, { useState, useEffect, useContext } from \"react\";\nimport { useInputs } from \"../util/InputHook\"; \nimport axios from \"axios\";\nimport \"../css/CreatePost.css\";\nimport { UserContext } from \"../provider/UserProvider\";\nimport { useHistory } from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport FormControl from '@material-ui/core/FormControl';\nimport { storage } from \"../Fire\";\nimport PostAddIcon from '@material-ui/icons/PostAdd';\nimport { getAPI } from \"../util/getAPI\";\n\nconst CreatePost = () => {\n    const [subreddits, setSubreddits] = useState([]);\n    const [chosenSub, setChosenSub] = useState(\"\");\n    const [urlLink, setUrlLink] = useState(\"\");\n    const titleContext = useInputs(\"\");\n    const bodyContext = useInputs(\"\");\n    const [filePreview, setFilePreview] = useState([]);\n    const [fileName, setFileName] = useState([]);\n    const { userID } = useContext(UserContext);\n    const history = useHistory();\n    const homeRedirect = () => history.push(`/`);\n    const API = getAPI();\n\n    const fetchSubreddits = async () => {\n        try {\n            let res = await axios.get(`${API}/subreddits/`)\n            setSubreddits(res.data.payload)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const handleChange = (e) => {\n        e.preventDefault();\n        setChosenSub(e.target.value);\n    }\n\n    const handleFile = (e) => {\n        e.preventDefault();\n        let file = e.target.files[0];\n        setFileName(file.name)\n        setFilePreview(URL.createObjectURL(file))\n        if(file) {\n            const uploadImage = storage.ref(`images/${file.name}`).put(file)\n            uploadImage.on(\n                \"state_changed\",\n                snapshot => {},\n                error => {\n                    console.log(error);\n                },\n                () => {\n                    storage\n                        .ref(\"images\")\n                        .child(file.name)\n                        .getDownloadURL()\n                        .then(url => {\n                            setUrlLink(url)\n                        })\n                }\n            )\n        }\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            await axios.post(`${API}/posts/`, {\n                user_id: userID,\n                sub_id: chosenSub,\n                title: titleContext.value,\n                context: bodyContext.value,\n                image: urlLink\n            })\n        } catch (error) {\n            console.log(error)\n        }\n        homeRedirect();\n    }\n\n    useEffect(() => {\n        fetchSubreddits()\n    }, []);\n\n    return(\n        <div className=\"createPostContainer\">\n            <div className=\"createPostSelectContainer\">\n                <PostAddIcon fontSize='large' color='secondary'/>\n                <FormControl>\n                    <NativeSelect\n                        value={chosenSub}\n                        onChange={handleChange}\n                    >\n                        <option hidden>Choose a Community</option>\n                            {subreddits.map((subreddit) => \n                        <option key={subreddit.id} value={ subreddit.id }>/r{subreddit.subname}</option>\n                            )}\n                    </NativeSelect>\n                </FormControl>\n            </div>\n            <form className=\"createForm\" onSubmit={handleSubmit}>\n                <TextField id=\"outlined-basic\" color='secondary' label=\"Title\" variant=\"outlined\" autoFocus required {...titleContext}/>\n                <TextField id=\"outlined-basic\" color='secondary' label=\"Text(optional)\" variant=\"outlined\" autoFocus {...bodyContext}/>\n                <label>Upload Image (optional)</label>\n                <input className=\"uploadFile\" type=\"file\" onChange={handleFile}/>\n                {filePreview.length > 0 ?\n                    <div className=\"upPreviewDetails\">\n                        <p>{fileName}</p>\n                        <img className=\"uploadPreview\" src={filePreview} alt=\"preview_image\"/>\n                    </div>\n                    : null\n                }\n                <Button variant=\"contained\" color='secondary' type=\"submit\">Post</Button>\n            </form>\n        </div>\n    )\n}\n\nexport default CreatePost;","import React, {  useContext } from \"react\";\nimport { useInputs } from \"../util/InputHook\"; \nimport axios from \"axios\";\nimport { UserContext } from \"../provider/UserProvider\";\nimport { useHistory } from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport \"../css/CreateSubreddit.css\";\nimport { getAPI } from \"../util/getAPI\";\n\nconst CreateSubreddit = () => {\n    const nameContext = useInputs(\"\");\n    const { userID } = useContext(UserContext);\n    const history = useHistory();\n    const homeRedirect = () => history.push(`/`);\n    const API = getAPI();\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            await axios.post(`${API}/subreddits/`, {\n                user_id: userID,\n                subname: nameContext.value\n            })\n        } catch (error) {\n            console.log(error)\n        }\n        homeRedirect();\n        window.location.reload()\n    }\n\n    return(\n        <div className=\"createSubContainer\">\n            <form className=\"createSubForm\" onSubmit={handleSubmit}>\n                <h2>Create Subreddit /r</h2>\n                <TextField id=\"outlined-basic\" color='secondary' label=\"Subname\" variant=\"outlined\" required autoFocus required {...nameContext}/>\n                <Button variant=\"contained\" color='secondary' type=\"submit\">Post</Button>\n            </form>\n        </div>\n    )\n}\n\nexport default CreateSubreddit;","import React, { useState, useEffect, useContext } from \"react\";\nimport { useInputs } from \"../util/InputHook\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../css/PostDetails.css\";\nimport { UserContext } from \"../provider/UserProvider\";\nimport { useHistory } from \"react-router-dom\";\nimport fire from \"./../Fire\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport RedditIcon from '@material-ui/icons/Reddit';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport moment from \"moment\";\nimport { getAPI } from \"../util/getAPI\";\n\nconst PostDetails = () => {\n    const { id } = useParams();\n    const [showPost, setShowPost] = useState([]);\n    const [showPostVotes, setShowPostVotes] = useState([]);\n    const [showAllComments, setShowAllComments] = useState([]);\n    const { userID } = useContext(UserContext);\n    const commentContext = useInputs(\"\");\n    const user = fire.auth().currentUser;\n    const history = useHistory();\n    const logInRedirect = () => history.push(`/login`);\n    const API = getAPI();\n    \n    const fetchPost = async () => {\n        try {\n            let post = await axios.get(`${API}/posts/post/${id}`);\n            let postVotes = await axios.post(`${API}/votes/count`, {\n                post_id: `${id}`\n            });\n            let comments = await axios.get(`${API}/comments/${id}`);\n            setShowPost(post.data.payload);\n            setShowPostVotes(postVotes.data.payload);\n            setShowAllComments(comments.data.payload);\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const printComments = showAllComments.map((comment) => (\n        <div className=\"commentCard\" key={comment.id}>\n            <div className=\"commentHeader\">\n                <RedditIcon fontSize='large' color='secondary'/>\n                <p className=\"commentInfo\">{comment.user_name}</p>\n                <p className=\"commentDate\">{moment(comment.comment_date).fromNow()}</p>\n            </div>\n            <div className=\"commentDetails\">\n                <p>{comment.body}</p>\n            </div>\n        </div>\n    ))\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if (user !== null){\n            try {\n                await axios.post(`${API}/comments/`, {\n                    user_id: userID,\n                    post_id: id,\n                    context: commentContext.value\n                })\n                fetchPost();\n            } catch (error) {\n                console.log(error)\n            }\n        } else {\n            logInRedirect(); \n        }\n    }\n\n    const handlePostVote = async (type) => {\n        if (user !== null) {\n            try {\n                let didVote = await axios.post(`${API}/votes/check`,{\n                    user_id: userID,\n                    post_id: id\n                })\n                if (didVote.data.payload.length === 0){\n                        await axios.post(`${API}/votes/add`,{\n                        user_id: userID,\n                        post_id: id,\n                        vote_type: type\n                    });\n                } else if (didVote.data.payload[0].vote_type === type) {\n                    await axios.delete(`${API}/votes/delete`, {\n                        data: {\n                            user_id: userID,\n                            post_id: id \n                        }\n                    });\n                } else if (didVote.data.payload[0].vote_type !== type) {\n                    await axios.patch(`${API}/votes/changevote`, {\n                        user_id: userID,\n                        post_id: id,\n                        vote_type: type\n                    });\n                }\n                fetchPost();\n            } catch (error) {\n                console.log(error) \n            }\n        } else {\n            logInRedirect(); \n        }\n    }\n\n    useEffect(() => {\n        fetchPost();\n    }, [id])\n\n    return(\n        <div className=\"singlePostCard\">\n            <div className=\"postVotes\">\n                <IconButton aria-label=\"up\" onClick={() => handlePostVote(\"up\")}>\n                    <ArrowUpwardIcon className=\"icon\" style={{ color: '#F74202' }}/>\n                </IconButton>\n                <p className=\"postCount\">{showPostVotes}</p>\n                <IconButton aria-label=\"down\" onClick={() => handlePostVote(\"down\")}>\n                    <ArrowDownwardIcon className=\"icon\" style={{ color: '#8D8FF7' }}/>\n                </IconButton>\n            </div>\n            <div className=\"postContent\">\n                <div className=\"postHolder\">\n                    <h2 className=\"postPostedHeader\">{showPost.title}</h2>\n                    <p className=\"postDetails\">{showPost.body}</p>\n                    {showPost.image ? \n                    <img className=\"postImage\" src={showPost.image} alt=\"post_image\"/>\n                    : null\n                }\n                </div>\n                <form className=\"postForm\" onSubmit={handleSubmit}>\n                    <TextField id=\"outlined-basic\" color='secondary' variant=\"outlined\" label=\"What are your thoughts?\" autoFocus required {...commentContext}/>\n                    <br/>\n                    <Button variant=\"contained\" color='secondary' type=\"submit\">Post</Button>\n                </form>\n                <div className=\"postComments\">\n                    {printComments}\n                </div>\n            </div>\n        </div>\n    )\n\n}\n\nexport default PostDetails;","import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport LogIn from './components/LogIn';\nimport HomePage from './components/HomePage';\nimport NavBar from './components/Navbar';\nimport Subreddit from  './components/Subreddit';\nimport CreatePost from './components/CreatePost';\nimport CreateSubreddit from './components/CreateSubreddit';\nimport PostDetails from './helper/PostDetails';\nimport fire from \"./Fire\";\nimport UserProvider from './provider/UserProvider';\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\nimport { getAPI } from \"./util/getAPI\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#FFFFFF',\n    },\n    secondary: {\n      main: '#1072C4',\n    },\n  },\n});\n\n\nfunction App() {\n    const [user, setUser] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [userName, setUserName] = useState(\"\");\n    const [emailError, setEmailError] = useState(\"\");\n    const [passwordError, setPasswordError] = useState(\"\");\n    const [userNameError, setUserNameError] = useState(\"\");\n    const [userExist, setUserExist] = useState(false);\n    const API = getAPI();\n\n    const clearInputs = () => {\n        setEmail(\"\");\n        setPassword(\"\");\n    }\n\n    const clearError = () => {\n        setEmailError(\"\");\n        setPasswordError(\"\");\n    }\n\n    const handleLogIn = () => {\n        clearError();\n        fire\n          .auth()\n          .signInWithEmailAndPassword(email, password)\n          .catch((error) => {\n            switch(error.code){\n                default: case \"auth/invalid-email\":\n                case \"auth/user-disabled\":\n                case \"auth/user-not-found\":\n                    setEmailError(error.message);\n                break;\n                case \"auth/wrong-password\":\n                    setPasswordError(error.message);\n                    break;\n            }\n        });\n    }\n\n    const handleSignUp = async () => {\n        clearError();\n        fire\n          .auth()\n          .createUserWithEmailAndPassword(email, password)\n          .then((res) => {\n            const user = fire.auth().currentUser;\n            return user.updateProfile({\n              displayName: userName\n            })\n          })\n          .catch((error) => {\n            switch(error.code){\n                default: case \"auth/email-already-in-use\":\n                case \"auth/invalid-email\":\n                    setEmailError(error.message);\n                break;\n                case \"auth/weak-password\":\n                    setPasswordError(error.message);\n                    break;\n                case \"auth/invalid-display-name\":\n                    setUserNameError(error.message);\n                    break;\n            }\n        });\n        try {\n          await axios.post(`${API}/users`, {\n            user_name: userName,\n            email: email\n          });\n        } catch (error) {\n          console.log(error)\n        }\n    }\n\n    useEffect(() => {\n      const authListener = () => {\n          fire.auth().onAuthStateChanged(user => {\n              if(user){\n                  clearInputs();\n                  setUser(user);\n              } else {\n                  setUser(\"\");\n              }\n          })\n      }\n      authListener();\n    }, [])\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <UserProvider>\n          <NavBar/>\n          <Switch>\n            <Route exact path={\"/\"}\n              render={() =>\n                <HomePage \n                user={user}\n                />}\n            />\n            <Route exact path={\"/login\"}\n              render={() => \n              <LogIn\n                user={user}\n                email={email}\n                setEmail={setEmail}\n                password={password}\n                userName={userName}\n                setUserName={setUserName}\n                setPassword={setPassword}\n                handleLogIn={handleLogIn}\n                handleSignUp={handleSignUp}\n                userExist={userExist}\n                setUserExist={setUserExist}\n                emailError={emailError}\n                passwordError={passwordError}\n                userNameError={userNameError}\n              />}\n            />\n            <Route exact path={\"/subreddit/:subname\"} component={Subreddit}/>\n            <Route exact path={\"/addpost\"} component={CreatePost}/>\n            <Route exact path={\"/addsubreddit\"} component={CreateSubreddit}/>\n            <Route exact path={\"/post/:id\"} component={PostDetails}/>\n          </Switch>\n        </UserProvider>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router><App/></Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}